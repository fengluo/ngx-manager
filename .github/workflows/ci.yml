name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE_NAME: nginx-manager

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy black isort
        pip install -r tests/requirements.txt
    
    - name: Code format check (black)
      run: black --check --diff scripts/ start.py tests/
    
    - name: Import sorting check (isort)  
      run: isort --check-only --diff scripts/ start.py tests/
    
    - name: Code style check (flake8)
      run: flake8 scripts/ start.py tests/
    
    - name: Type checking (mypy)
      run: mypy scripts/ start.py --ignore-missing-imports

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    
    - name: Run unit tests
      run: |
        python run_tests.py --unit --verbose --coverage-report
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    
    - name: Run integration tests
      run: |
        python run_tests.py --integration --verbose

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
    
    - name: Test Docker image
      run: |
        # Create test configuration
        mkdir -p test-config
        cat > test-config/vhosts.yml << EOF
        - name: "test"
          domains: ["localhost"]
          type: "static"
          root: "/var/www/html"
          ssl: false
        EOF
        
        cat > test-config/ssl.yml << EOF
        ssl:
          email: "test@example.com"
          ca_server: "letsencrypt"
        acme:
          staging: true
        EOF
        
        # Start container
        docker run -d \
          --name nginx-manager-test \
          -p 8080:80 \
          -v $(pwd)/test-config:/app/config \
          ${{ env.DOCKER_IMAGE_NAME }}:test
        
        # Wait for startup
        sleep 30
        
        # Check container status
        docker ps | grep nginx-manager-test
        
        # Check nginx process
        docker exec nginx-manager-test pgrep nginx
        
        # Test HTTP response
        curl -f http://localhost:8080 || true
        
        # View logs
        docker logs nginx-manager-test
        
        # Cleanup
        docker stop nginx-manager-test
        docker rm nginx-manager-test

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only run E2E tests on push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    
    - name: Build test image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
    
    - name: Run end-to-end tests
      run: |
        python run_tests.py --e2e --verbose --skip-slow

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Scan for dependency vulnerabilities (safety)
      run: |
        pip install -r tests/requirements.txt
        safety check
    
    - name: Static security analysis (bandit)
      run: |
        bandit -r scripts/ start.py -f json -o bandit-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: bandit-report.json

  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, docker-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        python -m pytest tests/ -m "not slow and not e2e" --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: benchmark.json

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README
      run: |
        if [ ! -f README.md ]; then
          echo "❌ README.md file does not exist"
          exit 1
        fi
        
        if [ $(wc -l < README.md) -lt 10 ]; then
          echo "❌ README.md content is too short"
          exit 1
        fi
        
        echo "✅ README.md check passed"
    
    - name: Check CHANGELOG
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "⚠️ CHANGELOG.md file does not exist"
        else
          echo "✅ CHANGELOG.md exists"
        fi
    
    - name: Check LICENSE
      run: |
        if [ ! -f LICENSE ]; then
          echo "⚠️ LICENSE file does not exist"
        else
          echo "✅ LICENSE file exists"
        fi

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, docker-tests]
    if: always()
    
    steps:
    - name: Send notification
      if: failure()
      run: |
        echo "❌ CI/CD pipeline execution failed!"
        echo "Please check failed tasks and fix the issues." 